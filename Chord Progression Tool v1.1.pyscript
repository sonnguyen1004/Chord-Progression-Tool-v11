# *** FL Studio Piano Roll script by Pierre Sosa ***

import flpianoroll as flp
import _random
from itertools import permutations
 
# Defaults and variables
default_root_note = 6 # can be modified by key marker
default_scale = 1 # can be modified by key marker
default_start_octave = 5
default_quantization = 0
default_chord_duration = 5
default_chords = [0,5,3,4] # default values for chord selectors, can be modified by 'chords markers'
default_chords_types = [0,0,0,0] # can be modified by 'chords markers'
default_inversions = [0,0,0,0] # can be modified by 'chords markers'
default_clear_before = 1
default_markers = 3
seed_for_RNG_max = 999

# Grid units
beat = flp.score.PPQ # PPQ equals how many ticks there are in a beat
bar = beat * 4
step = beat / 4

# Duration, quantization and arpeggiator units
duration_units = [beat / 2, beat, 1.5 * beat,2 * beat, 3 * beat, bar, 1.5 * bar, 2 * bar]
duration_control = ["1/2 Beat","Beat","Dotted Beat","2 Beats","3 Beats","Bar","Dotted Bar","2 Bars"]
quantization_units = [step / 2, step, beat / 2, beat, 2 * beat]
quantization_control = ["1/2 Step","Step","1/2 Beat","Beat","1/2 Bar"]
arpeggiator_units = [step / 3, step / 2, beat / 6, step, beat / 3, 1.5 * step, beat / 2, bar / 6, 3 * step, beat, bar / 3, 6 * step, 2 * beat]
arpeggiator_control = ["1/3 Step","1/2 Step","1/6 Beat","Step","1/3 Beat","Dotted Step","1/2 Beat","1/6 Bar","3 Steps","Beat","1/3 Bar","Dotted Beat","2 Beats"]

if step % 4 == 0: # In 24, 72, 120, 168 PPQ settings step is not divisible by 4
	quantization_units = [step / 4] + quantization_units
	quantization_control = ["1/4 Step"] + quantization_control
	arpeggiator_units = [step / 4] + arpeggiator_units
	arpeggiator_control = ["1/4 Step"] + arpeggiator_control
	
# Strings lists
root_notes_names = ["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"]
scales_names = ["Major (Ionian)","Minor Natural (Aeolian)","Minor Harmonic","Minor Melodic","Minor Hungarian","Minor Neapolitan","Minor Romanian","Major Bulgarian","Major Persian","Neapolitan","Arabic","Dorian","Phrygian","Phrygian Dominant","Lydian","Mixolydian","Locrian","Locrian Super"]
chords_nums = ["filler", "1st", "2nd", "3rd", "4th"]
chords_types = ["Triad","Power (Fifth)","Open","Sus2","Sus4","Fifth 9th","Add9","Add11","Add13","Sixth","6add9","Seventh","7add11","7add13","Ninth","Eleventh","Thirteenth","Single Note (root)"]
inversions = ["Root","First","Second","Third","Fourth","Fifth","Sixth","Seventh"]
roman_numerals = ["I","II","III","IV","V","VI","VII"]
arp_modes_str = ["Off","Up","Down","Up-Down (bounce)","Down-Up (bounce)","Up-Down (sticky)","Down-Up (sticky)","Random order","Random keys","Poly (chop chords)"]

# Permutations
permutations_list = list(permutations([1,2,3,4]))

# Strings list for Shuffle control
permutations_str_list = [str("-".join(str(i) for i in p)) for p in permutations_list]
permutations_str_list[0] += " (Off)" 

# Scales intervals
scales_intervals = [
	[0, 2, 4, 5, 7, 9, 11], # Major (Ionian) Intervals
	[0, 2, 3, 5, 7, 8, 10], # Minor Natural (Aeolian) Intervals  
	[0, 2, 3, 5, 7, 8, 11], # Minor Harmonic Intervals  
	[0, 2, 3, 5, 7, 9, 11], # Minor Melodic Intervals  
	[0, 2, 3, 6, 7, 8, 11], # Minor Hungarian Intervals  
	[0, 1, 3, 5, 7, 8, 11], # Minor Neapolitan Intervals  
	[0, 2, 3, 6, 7, 9, 10], # Minor Romanian Intervals  
	[0, 2, 5, 6, 8, 9, 11], # Major Bulgarian Intervals  
	[0, 1, 4, 5, 6, 8, 11], # Major Persian Intervals  
	[0, 1, 3, 5, 7, 9, 11], # Neapolitan Intervals  
	[0, 1, 4, 5, 7, 8, 11], # Arabic Intervals  
	[0, 2, 3, 5, 7, 9, 10], # Dorian Intervals  
	[0, 1, 3, 5, 7, 8, 10], # Phrygian Intervals  
	[0, 1, 4, 5, 7, 8, 10], # Phrygian Dominant Intervals  
	[0, 2, 4, 6, 7, 9, 11], # Lydian Intervals
	[0, 2, 4, 5, 7, 9, 10], # Mixolydian Intervals  
	[0, 1, 3, 5, 6, 8, 10], # Locrian Intervals
	[0, 1, 3, 4, 6, 8, 10]  # Locrian Super Intervals
]

# Chords intervals (at scale intervals)	
chords_intervals = (
	(0, 2, 4), # Triad
	(0, 4), # Power (Fifth)
	(0, 4, 9), # Open
	(0, 1, 4), # Sus2
	(0, 3, 4), # Sus4
	(0, 4, 8), # Fifth 9th
	(0, 2, 4, 8), # Add9  
	(0, 2, 4, 10), # Add11  
	(0, 2, 4, 12), # Add13  
	(0, 2, 4, 5), # Sixth
	(0, 2, 4, 5, 8), # 6add9  
	(0, 2, 4, 6), # Seventh
	(0, 2, 4, 6, 10), # 7add11  
	(0, 2, 4, 6, 12), # 7add13	
	(0, 2, 4, 6, 8), # Ninth  
	(0, 2, 4, 6, 8, 10), # Eleventh  
	(0, 2, 4, 6, 8, 10, 12), # Thirteenth
	[0] # Single Note (root), needs to be stored as a list in order to have length property
)

# Markers detection
detected_key_marker = "none"

def check_chord_degree(splitted_marker_name):
	global chords_detections
	for numeral in range(len(roman_numerals)):
		if splitted_marker_name[0] == roman_numerals[numeral]:
			default_chords.pop(chords_detections)
			default_chords.insert(chords_detections,numeral)
			if len_of_splitted_marker_name > 3:
				check_chord_type(splitted_marker_name)
			chords_detections += 1
			break

def check_chord_type(splitted_marker_name):
	for ch_type in range(len(chords_types)):	
		if splitted_marker_name[3] == chords_types[ch_type].split()[0]:
			default_chords_types.pop(chords_detections)
			default_chords_types.insert(chords_detections,ch_type)
			if len_of_splitted_marker_name > 5:
				check_inversion(splitted_marker_name)
			break

def check_inversion(splitted_marker_name):
	for inv in range(len(inversions)):	
		if splitted_marker_name[-2] == "(" + inversions[inv]:
			default_inversions.pop(chords_detections)
			default_inversions.insert(chords_detections,inv)
			break

if flp.score.markerCount > 0:
	chords_detections = 0
	there_is_a_match = False
	first_key_marker_root = False	
	for m in range(flp.score.markerCount):
		marker = flp.score.getMarker(m)
		if not there_is_a_match and marker.mode == 12:	# Key marker detection		
			if not first_key_marker_root: 
				default_root_note = marker.scale_root
				first_key_marker_root = True
			current_scale_helper = marker.scale_helper.split(",")
			marker_intervals = [i for i in range(len(current_scale_helper)) if current_scale_helper[i] == '0']
			if (marker_intervals_len := len(marker_intervals)) == 7:
				for i in range(marker_intervals_len):
					marker_intervals[i] -= marker.scale_root if marker_intervals[i] - marker.scale_root >= 0 else (marker.scale_root - 12)
				marker_intervals.sort()
				for s, single_scale in enumerate(scales_intervals):
					if single_scale == marker_intervals:
						default_scale = s
						default_root_note = marker.scale_root
						there_is_a_match = True
						detected_key_marker = flp.score.getMarker(m).name
						flp.Utils.ProgressMsg("Detected key marker: " + detected_key_marker,0,0)							
						break

		if not marker.mode and chords_detections < 4: # Chords markers detection
			splitted_marker_name = flp.score.getMarker(m).name.split()
			if (len_of_splitted_marker_name := len(splitted_marker_name)) > 0:
				check_chord_degree(splitted_marker_name)

# For random
launch_flag = True
random_degree_flags = [False for i in range(5)]
random_degree_values = [0 for i in range(5)]
random_types_flags = [False for i in range(5)]
random_types_values = [0 for i in range(5)]
random_inversions_flags = [False for i in range(5)]
random_inversions_values = [0 for i in range(5)]

# Randomizer
def random_generator(seed):
	x = _random.Random()
	x.seed(seed) if seed > 0 else x.seed()
	while True:
		yield x.random()
	
def random_value(return_int, range_min, range_max):
	random_value = next(rng) * (range_max - range_min) + range_min  # convert value to fit between min and max range

	if return_int:  # convert value to integer
		return round(random_value)
	return random_value	

# Script GUI Section
def createDialog():
	Form = flp.ScriptDialog(
	"Chord Progression Tool v1.1", "Detected key marker: " + detected_key_marker + "\r\n" + 
	"\r\n" + 
	"This script can detect key markers in Piano Roll and 'chord markers' created by itself (with the 'Create Markers?' drop down menu) to set default values for selectors. If there is more than one key marker in Piano Roll then the first (earliest) one is used. In order to reset the values to defaults use 'Reset' button (for all) or middle mouse button on a single selector. \r\n" + 
	"\r\n" + 
	"'Chord duration' drop down menu sets the 'base' duration of the chords. 'Duration mode' drop down menu affects the behavior of the chord start and duration knobs: \r\n" + 
	"-Absolute: chord duration is not relative to other chords.\r\n" + 
	"-Relative: chord duration is relative to the start of the next chord (or to the end of the score). It means that tweaking the chord start knobs will automatically change the duration of its chord and the chord previous to it.\r\n" + 
	"-Legato: chords always end at the start of the next chord (or at the end of the score). Chord duration knobs are deactivated. \r\n" + 
	"\r\n" + 
	"Humanize knobs: randomization for notes start positions (time knob) and velocties. Positive values = bipolar mode, negative values = unipolar mode (shift forward for time, decrease for velocity).\r\n" +
	"\r\n" +
	"Shuffle setting: permutates the chords order. When 'random' mode is selected, hint bar shows the random value.\r\n" +
	"\r\n" + 
	"'Seed for RNG' knob takes values from -1 to " + str(seed_for_RNG_max) + ":\r\n" +
	"-if it's set to '-1', the RNG generates different random values each time and every execution of the script (triggered by 'regenerate' button or by tweaking any control) refreshes all random values.\r\n" +
	"-if it's set to '0', the RNG generates different random values each time, but they are not refreshed when the script is executed. You can separately refresh the random values of controls set to 'random' by changing the value to another (non-random), and then going back to 'random'. To refresh values of all controls you can change the 'Seed for RNG' knob value to '-1' and bring it back to '0'.\r\n" +
	"-if it's set to a positive value, the RNG generates the same random values for the same seed value.\r\n" +
	"Note: humanize values and order/keys of notes in random order and random keys Arp modes are going to be refreshed when the script is executed even if the 'Seed for RNG' knob value is set to 0. They can also yield different results even if the seed doesn't change (i.e. when the 'Seed for RNG' knob is set to a positive value), if it's needed due to change in some controls values, for example those that affect final number of notes.\r\n" + 
	"\r\n" + 
	"Clear score setting: deletes all notes or/and markers existing in the score before running the script. Applies only for notes selected at the execution of the script (all if none is selected).\r\n" +
	"\r\n" + 
	"Image-Line forums thread of the script: https://forum.image-line.com/viewtopic.php?t=310058 \r\n" +
	"\r\n" + 
	"*** script by Pierre Sosa ***"
	)
	Form.AddInputCombo("Root Note", root_notes_names + ["Random"], default_root_note)
	Form.AddInputCombo("Scale", scales_names + ["Random"], default_scale)
	Form.AddInputCombo("Start Octave", [str(i) for i in range(11)], default_start_octave)	
	Form.AddInputCombo("Quantization", ["None"] + quantization_control, default_quantization)   
	Form.AddInputCombo("Chord duration", duration_control, default_chord_duration)
	Form.AddInputCombo("Duration mode", "Absolute,Relative,Legato", 1) 
	for i in range(1,5):
		Form.AddInputCombo(chords_nums[i] + " Chord", roman_numerals + ["Extend Previous Chord,Skip,Empty Space,Random"], default_chords[i-1])
		Form.AddInputCombo(chords_nums[i] + " Type", chords_types + ["Random"], default_chords_types[i-1])
		Form.AddInputCombo(chords_nums[i] + " Inversion", inversions + ["Random"], default_inversions[i-1])
		Form.AddInputCombo(chords_nums[i] + " Transpose", [str(i) for i in range(-3,4)], 3)
		Form.AddInputKnob(chords_nums[i] + " Start", 0, -16, 16)
		Form.AddInputKnob(chords_nums[i] + " Duration", 0, -16, 16)
	Form.AddInputCombo("Layers", "None,One Octave Above,Two Octaves Above,One + Two Octaves Above", 0)     
	Form.AddInputCombo("Bass Notes", "None,One Octave Below,Two Octaves Below,One + Two Octaves Below", 0)
	Form.AddInputKnob("Strum (time)", 0, -100, 100)	
	Form.AddInputKnob("Strum (velocity)", 0, -100, 100)
	Form.AddInputCombo("Arp (mode)", arp_modes_str + ["Random mode"], 0)	
	Form.AddInputCombo("Arp (speed)", arpeggiator_control + ["Random"],4)
	Form.AddInputKnob("Humanize (time)", 0, -1, 1)	
	Form.AddInputKnob("Humanize (velocity)", 0, -1, 1)	
	Form.AddInputCombo("Shuffle", permutations_str_list + ["Random"], 0)
	Form.AddInputKnobInt("Seed for RNG",0,-1,seed_for_RNG_max)	
	Form.AddInputCombo("Clear before?", "No,Yes,Only Notes,Only Markers",default_clear_before)
	Form.AddInputCombo("Create Markers?", "No,Key Marker,Chords,Key and Chords",default_markers)
	return Form   
    
# Script Main Function Section    
def apply(Form):
	
	GIV = lambda x : Form.GetInputValue(x)
	
	seed = GIV("Seed for RNG")
	global rng
	rng = random_generator(seed)
	
	if (clear_before := GIV("Clear before?")) == 1:
		flp.score.clear(True) # Deletes all notes and markers    
	elif clear_before == 2:
		flp.score.clearNotes(True) # Deletes all notes
	elif clear_before == 3:
		flp.score.clearMarkers(True) # Deletes all markers
	
	# Random section
	global launch_flag
	global previous_seed
	global random_root_flag
	global random_root_value 
	global random_scale_flag
	global random_scale_value 
	global random_arp_mode_flag
	global random_arp_mode_value
	global random_arp_speed_flag
	global random_arp_speed_value	
	global random_shuffle_flag
	global random_shuffle_value
	
	# Checks if the seed is changed to 0 from another seed
	zero_seed_flag = False
	if not launch_flag and previous_seed and not seed:
		zero_seed_flag = True
	previous_seed = seed
	
	# If random_x_flag = True, then the random value for x will be restored from the global variable.
	if launch_flag or seed or zero_seed_flag:
		launch_flag = False
		random_root_flag = False
		random_scale_flag = False
		random_arp_mode_flag = False
		random_arp_speed_flag = False
		random_shuffle_flag = False
	
	# Random root
	root_note = GIV("Root Note") 
	if root_note == 12:			
		if not random_root_flag:
			root_note = random_value(True,0,11)
			random_root_value = root_note
			random_root_flag = True
		else: root_note = random_root_value
	else: random_root_flag = False	
	
	# Random scale
	scale = GIV("Scale")
	if scale == (num_of_scales := len(scales_names)):			
		if not random_scale_flag:
			scale = random_value(True,0,num_of_scales-1)
			random_scale_value = scale
			random_scale_flag = True
		else: scale = random_scale_value
	else: random_scale_flag = False		
	
	# Random arp mode
	arp_mode = GIV("Arp (mode)")
	if arp_mode == (num_of_arp_modes := len(arp_modes_str)):
		if not random_arp_mode_flag:
			arp_mode = random_value(True,1,num_of_arp_modes-1)
			random_arp_mode_value = arp_mode
			random_arp_mode_flag = True
		else: arp_mode = random_arp_mode_value
	else: random_arp_mode_flag = False	
	
	# Random arp speed
	arp_speed = GIV("Arp (speed)")
	if arp_speed == (num_of_arp_units := len(arpeggiator_units)):
		if not random_arp_speed_flag:
			arp_speed = random_value(True,0,num_of_arp_units-1)
			random_arp_speed_value = arp_speed
			random_arp_speed_flag = True
		else: arp_speed = random_arp_speed_value
	else: random_arp_speed_flag = False	
	
	# Random shuffle
	shuffle = GIV("Shuffle")
	if shuffle == (max_shuffle := len(permutations_list)):
		if not random_shuffle_flag:
			shuffle = random_value(True,0,max_shuffle-1)
			random_shuffle_value = shuffle
			random_shuffle_flag = True
		else: shuffle = random_shuffle_value
		flp.Utils.ProgressMsg("Random Shuffle: " + str(permutations_str_list[shuffle]),0,0)			
	else: random_shuffle_flag = False
	
	# Expands scale intervals to 11 octaves	
	intervals = scales_intervals[scale].copy()
	intervals_length_at_start = len(intervals)
	for octave in range(1,11):
		intervals.extend([intervals[i]+12*octave for i in range(intervals_length_at_start)])			

	# Loop length in ticks
	loop_length_in_ticks = duration_units[GIV("Chord duration")] * 4
    
	# Starts and lengths of chords
	chords_start = []
	chords_length = []
	active_chord_spaces = []
	
	skipped_count = 0
	for i, chord_space_i in enumerate(permutations_list[shuffle]): 
		if GIV(chords_nums[chord_space_i] + " Chord") == 7: # Extend Previous Chord
			continue
		if GIV(chords_nums[chord_space_i] + " Chord") == 8: # Skip
			skipped_count += 1
			continue
		start_knob_value_in_percent = (GIV(chords_nums[chord_space_i] + " Start")/16)
		if start_knob_value_in_percent >= 0:
			mod = (loop_length_in_ticks - (loop_length_in_ticks / 4) * (i-skipped_count))
		else: mod = ((loop_length_in_ticks / 4) * (i-skipped_count))
		chords_start.append((loop_length_in_ticks / 4) * (i-skipped_count) + start_knob_value_in_percent * mod)
		active_chord_spaces.append(chord_space_i)
		
	# Quantize start points
	if (quantization_value := (GIV("Quantization") - 1)) >= 0:
		quantization_unit = quantization_units[quantization_value]	
		for i in range(len(chords_start)):
			if (chords_start[i] % quantization_unit) > (quantization_unit / 2):
				chords_start[i] = chords_start[i] - (chords_start[i] % quantization_unit) + quantization_unit
			else: chords_start[i] = chords_start[i] - (chords_start[i] % quantization_unit)

	# Calculates lengths
	if GIV("Duration mode") == 0: # Absolute chords duration
		for i,chord_space_i in enumerate(active_chord_spaces): 
			length_knob_value_in_percent = (GIV(chords_nums[chord_space_i] + " Duration")/16)
			if length_knob_value_in_percent >= 0:
				mod = (loop_length_in_ticks - (chords_start[i]+(loop_length_in_ticks / 4)))
			else: mod = (loop_length_in_ticks / 4)
			chords_length.append((loop_length_in_ticks / 4) + length_knob_value_in_percent * mod)
	else: # Relative and Legato chords duration
		sorted_chords_start = chords_start.copy()
		sorted_chords_start.sort()
		
		# Removes duplicate chords starts points from the sorted list (happens when there are overlapping start points)
		for i in reversed(range(len(sorted_chords_start))):   
			while i < (len(sorted_chords_start) - 1) and sorted_chords_start[i] == sorted_chords_start[i+1]:
				sorted_chords_start.pop(i+1)
        
		# Final calculation
		for i,chord_space_i in enumerate(active_chord_spaces):  
			j = sorted_chords_start.index(chords_start[i])
			if j < (len(sorted_chords_start) - 1): # All chords except the last chord        
				chords_length.append(sorted_chords_start[j+1] - sorted_chords_start[j]) # Legato and base for relative
			else: # For last chord
				chords_length.append((loop_length_in_ticks / 4) * (4-skipped_count) - sorted_chords_start[j]) # Legato and base for relative
			if GIV("Duration mode") == 1: # Relative
				length_knob_value_in_percent = (GIV(chords_nums[chord_space_i] + " Duration")/16)
				if length_knob_value_in_percent >= 0:
					mod = (loop_length_in_ticks - (chords_start[i]+chords_length[i]))
				else: mod = chords_length[i]
				chords_length[i] = chords_length[i] + length_knob_value_in_percent * mod

	# Quantize end points
	if quantization_value >= 0:
		for i in range(len(chords_length)):
			if (chords_length[i] % quantization_unit) > (quantization_unit / 2):
				chords_length[i] = chords_length[i] - (chords_length[i] % quantization_unit) + quantization_unit
			else: chords_length[i] = chords_length[i] - (chords_length[i] % quantization_unit)
	
	# Create Key Marker
	if GIV("Create Markers?") % 2 != 0:
		key_marker = flp.Marker()
		scale_name = scales_names[scale] if scale < 9 else "Other " + scales_names[scale] 
		key_marker.name = root_notes_names[root_note] + " " + scale_name
		key_marker.time = 0
		key_marker.mode = 12
		key_marker.scale_root = root_note
		scale_helper_for_created_marker = ""
		for i in range(12-root_note,24-root_note):
			scale_helper_for_created_marker += "1," if intervals.count(i) == 0 else "0,"
		scale_helper_for_created_marker = scale_helper_for_created_marker.rstrip(",")
		key_marker.scale_helper = scale_helper_for_created_marker
		flp.score.addMarker(key_marker)
	
	# For strumizer
	strum_time_factor = GIV("Strum (time)")/100
	strum_vel_factor = GIV("Strum (velocity)")/100
	
	final_notes = []
	
	# Creates chords
	for i, chord_space_i in enumerate(active_chord_spaces): 
	
		chord_degree = GIV(chords_nums[chord_space_i] + " Chord")
		
		if chord_degree == 9: # Empty Space
			continue
			
		# Random properties
		if seed or zero_seed_flag:
			random_degree_flags[chord_space_i] = False
			random_types_flags[chord_space_i] = False
			random_inversions_flags[chord_space_i] = False

		if chord_degree == 10: # Random chord
			if not random_degree_flags[chord_space_i]: 
				chord_degree = random_value(True,0,6)
				random_degree_values[chord_space_i] = chord_degree
				random_degree_flags[chord_space_i] = True
			else: chord_degree = random_degree_values[chord_space_i]
		else: random_degree_flags[chord_space_i] = False
		
		chord_type = GIV(chords_nums[chord_space_i] + " Type")
		if chord_type == (num_of_chord_types := len(chords_types)): # Random chord type
			if not random_types_flags[chord_space_i]:
				chord_type = random_value(True,0,num_of_chord_types-1)
				random_types_values[chord_space_i] = chord_type
				random_types_flags[chord_space_i] = True
			else: chord_type = random_types_values[chord_space_i]
		else: random_types_flags[chord_space_i] = False
		
		inversion = GIV(chords_nums[chord_space_i] + " Inversion")
		if inversion == len(inversions): # Random inversion
			if not random_inversions_flags[chord_space_i]:
				inversion = random_value(True,0,len(chords_intervals[chord_type]))
				random_inversions_values[chord_space_i] = inversion
				random_inversions_flags[chord_space_i] = True
			else: inversion = random_inversions_values[chord_space_i]
		else: random_inversions_flags[chord_space_i] = False
		
		# Notes in chord intervals (at scale intervals)
		notes_in_chord_intervals = []
		for j in range(len(chords_intervals[chord_type])):
			interval = chords_intervals[chord_type][j]
			if not j and (bass_notes := GIV("Bass Notes")) > 0:	
				if bass_notes % 2 != 0: # One octave below
					notes_in_chord_intervals.append(interval + intervals_length_at_start)
				if bass_notes >= 2: # Two octaves below
					notes_in_chord_intervals.append(interval)
			if j <= inversion - 1: # Inversion
					interval = interval + intervals_length_at_start
			notes_in_chord_intervals.append(interval + intervals_length_at_start * 2) # Actual chord notes				
			if (layers := GIV("Layers")) > 0: 
				if layers % 2 != 0: # One octave above
					notes_in_chord_intervals.append(interval + intervals_length_at_start * 3)
				if layers >= 2: # Two octaves above
					notes_in_chord_intervals.append(interval + intervals_length_at_start * 4)
		notes_in_chord_intervals.sort()

		# Starts and lengths
		chord_start = round(chords_start[i])
		chord_length = round(chords_length[i])
		
		# Number of notes in the chord with layers and bass notes (for strumizer and arpeggiator)
		num_of_notes = len(notes_in_chord_intervals)
				
		# Strumizer functions
		def calc_time_shift(n):
			if strum_time_factor >= 0:
				start_shift = ((loop_length_in_ticks / 4) / 4) * n * strum_time_factor
			else: # strum_time_factor < 0
				start_shift = ((loop_length_in_ticks / 4) / 4) * (num_of_notes - (n+1)) * -strum_time_factor
			return int(start_shift)
		
		def calc_velocity(n):
			if strum_vel_factor >= 0:
				velocity = 0.78125 - (0.78125 / 3) * n * strum_vel_factor
			else: # strum_vel_factor < 0
				velocity = 0.78125 - (0.78125 / 3) * (num_of_notes - (n+1)) * -strum_vel_factor
			return max(0.0625,velocity)
			
		# For arpeggiator
		if arp_mode:
			arp_unit = arpeggiator_units[arp_speed]
			arp_notes_max = int(chord_length / arp_unit)
			arp_note_remainder = chord_length % arp_unit
			arp_note_remainder_flag = 0 if arp_note_remainder == 0 else 1
			if (arp_mode == 3 or arp_mode == 4) and num_of_notes > 1: # Arp modes: bounce
				arp_loops = int(arp_notes_max / (num_of_notes-1))
			else: arp_loops = int(arp_notes_max / num_of_notes)
			if arp_mode == 7: # Arp mode: random order 
				random_arp_notes_position = []
				possible_random_arp_notes_position = [p for p in range(arp_notes_max + arp_note_remainder_flag)]
				for r in range(arp_notes_max + arp_note_remainder_flag):
					find_random_position = random_value(True,0,len(possible_random_arp_notes_position)-1)
					random_arp_notes_position.append(possible_random_arp_notes_position[find_random_position])
					possible_random_arp_notes_position.pop(find_random_position)

		arp_loop_numbers = []
		arp_loop_time_bases = []
		arp_loop_time_shifts = []
		arp_loop_velocities = []
			
		# Adds Markers
		if GIV("Create Markers?") > 1: 
			new_marker = flp.Marker()
			chord_note = root_note + intervals[chord_degree] if root_note + intervals[chord_degree] < 12 else root_note + intervals[chord_degree] - 12
			new_marker.name = roman_numerals[chord_degree] + " - " + root_notes_names[chord_note] + " " + chords_types[chord_type] + (" (" + inversions[inversion] + " inversion)" if inversion > 0 else "")
			new_marker.time = chord_start
			flp.score.addMarker(new_marker) 

		# Create Notes  
		for n in range(num_of_notes): 
		
			new_note = flp.Note()
			new_note.number = root_note + (GIV("Start Octave")-2) * 12 + (GIV(chords_nums[chord_space_i] + " Transpose") - 3) * 12 + intervals[notes_in_chord_intervals[n] + chord_degree] # 60 = C5 note  
			if new_note.number >= 0 and new_note.number <= 131:
				new_note.time = chord_start
				new_note.length = chord_length
				
				if strum_time_factor: # Strum (time)
					time_shift = calc_time_shift(n)
					new_note.time = chord_start + time_shift					
					new_note.length = note_len if (note_len := chord_length - time_shift) > 0 else 1
				else: time_shift = 0
				if strum_vel_factor: # Strum (velocity)
					new_note.velocity = calc_velocity(n)
				if not arp_mode or arp_mode == (num_of_arp_modes - 1): # Arpeggiator off or Arp Poly mode 
					final_notes.append(new_note)

					if arp_mode == (num_of_arp_modes - 1): # Arp Poly mode 
						new_note.length = min(chord_length,max(1,arp_unit - time_shift))
						for chop in range(1,arp_notes_max+arp_note_remainder_flag):
							arp_note = flp.Note()
							arp_note.number = new_note.number
							arp_note.time = chord_start + arp_unit * chop + time_shift
							if arp_note_remainder_flag == 1 and chop == arp_notes_max:
								arp_note.length = max(1,arp_note_remainder - time_shift)
							else: arp_note.length = new_note.length
							arp_note.velocity = new_note.velocity
							final_notes.append(arp_note)
				else: # Creates data for arpeggiator (modes other than Poly)
					if arp_mode % 2 != 0 or arp_mode > 6: # Arp modes: up / up-down (bounce) / up-down (sticky) / Random
						note_i = n
					else: # Arp modes: down / down-up (bounce) / down-up (sticky)
						note_i = (num_of_notes - (n+1))
			
					arp_loop_numbers.append(new_note.number)
					arp_loop_time_bases.append(chord_start + arp_unit * note_i)
					arp_loop_time_shifts.append(time_shift)
					arp_loop_velocities.append(new_note.velocity)
					
		# Arpeggiator (modes other than Poly)
		if arp_mode and arp_mode != (num_of_arp_modes - 1): 
			
			arp_notes_count = 0

			if arp_mode % 2 == 0 and arp_mode < 7: # Arp modes: down / down-up (bounce) / down-up (sticky)
				arp_loop_numbers.reverse()
				arp_loop_time_bases.reverse()
				arp_loop_time_shifts.reverse()
				arp_loop_velocities.reverse()

			if (arp_mode == 3 or arp_mode == 4) and num_of_notes > 1: # Arp modes: bounce		
				num_of_notes -= 1
			
			for arp_loop in range(arp_loops+1):
				
				if arp_loop > 0 and arp_mode > 2 and arp_mode < 7: # Arp modes: bounce and sticky
					arp_loop_numbers.reverse()
					arp_loop_time_shifts.reverse()
					arp_loop_velocities.reverse()
				
				for note_i in range(num_of_notes): 
							
					arp_note = flp.Note()
					if arp_mode != 8: arp_note.number = arp_loop_numbers[note_i]
					else: arp_note.number = arp_loop_numbers[random_value(True,0,len(arp_loop_numbers)-1)]
					arp_note.time = arp_loop_time_bases[note_i] + arp_loop_time_shifts[note_i] + arp_unit * num_of_notes * arp_loop
					arp_note.length = arp_unit
					arp_note.velocity = arp_loop_velocities[note_i]
					
					arp_notes_count += 1
					
					if arp_notes_count > arp_notes_max:
						if arp_notes_count == arp_notes_max + 1 and arp_note_remainder != 0:
							arp_note.length = arp_note_remainder
						else: break
	
					if arp_mode == 7: # Arp - random order 
						arp_note.time = chord_start + arp_loop_time_shifts[note_i] + arp_unit * random_arp_notes_position[arp_notes_count-1]
						if random_arp_notes_position[arp_notes_count-1] == arp_notes_max and arp_note_remainder != 0:
							arp_note.length = arp_note_remainder
						else: arp_note.length = arp_unit
						
					final_notes.append(arp_note)
					
	# Humanize and add notes
	for new_note in final_notes:
		if (humanize_time := GIV("Humanize (time)")):
			max_change = humanize_time * (loop_length_in_ticks / 16)
			if max_change > 0:
				change = round(random_value(False,-max_change,max_change))
			else: change = round(random_value(False,0,-max_change))
			new_note.time = new_note.time + round(change) if new_note.time + round(change) > 0 else 0
		if humanize_velocity := GIV("Humanize (velocity)"):
			max_change = humanize_velocity
			if max_change > 0:
				change = random_value(False,-max_change,max_change)
			else: change = random_value(False,0,max_change)
			new_velocity = new_note.velocity + change
			if new_velocity > 1: new_velocity = 1
			elif new_velocity < 0: new_velocity = 0
			new_note.velocity = new_velocity
		flp.score.addNote(new_note)